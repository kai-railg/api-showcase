# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import vehicle_manager_pb2 as vehicle__manager__pb2


class Vehicle_ManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fleetmgmt = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/fleetmgmt',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.stop = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/stop',
                request_serializer=vehicle__manager__pb2.StopRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.stop_all = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/stop_all',
                request_serializer=vehicle__manager__pb2.StopAllRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.position_remove = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/position_remove',
                request_serializer=vehicle__manager__pb2.RemoveVehiclePositionRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.position_remove_all = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/position_remove_all',
                request_serializer=vehicle__manager__pb2.RemoveAllVehiclePositionRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.power = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/power',
                request_serializer=vehicle__manager__pb2.VehiclePowerRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.bertinitial = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/bertinitial',
                request_serializer=vehicle__manager__pb2.BerthRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.navigation = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/navigation',
                request_serializer=vehicle__manager__pb2.NavigationRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.api_vehicleManager_abort_post = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/api_vehicleManager_abort_post',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.status = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/status',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.twist_locks = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/twist_locks',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.handshake = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/handshake',
                request_serializer=vehicle__manager__pb2.HandshakeRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.qc_positions_change = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/qc_positions_change',
                request_serializer=vehicle__manager__pb2.QCPositionRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.unlock = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/unlock',
                request_serializer=vehicle__manager__pb2.UnlockVehicleRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.alignment = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/alignment',
                request_serializer=vehicle__manager__pb2.AlignmentRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.safetyLeave = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/safetyLeave',
                request_serializer=vehicle__manager__pb2.SafeLeaveRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.lockout_notification = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/lockout_notification',
                request_serializer=vehicle__manager__pb2.LockoutNotificationRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.short_route_mission = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/short_route_mission',
                request_serializer=vehicle__manager__pb2.ShortBackPathRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.query_position_available = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/query_position_available',
                request_serializer=vehicle__manager__pb2.QueryAvailablePosRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.report_led_information = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/report_led_information',
                request_serializer=vehicle__manager__pb2.ReportLedInfoRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.weather = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/weather',
                request_serializer=vehicle__manager__pb2.ReportWeatherRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.ts_positions_change = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/ts_positions_change',
                request_serializer=vehicle__manager__pb2.TSPositionRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.create_qctp_area = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/create_qctp_area',
                request_serializer=vehicle__manager__pb2.CreateDynamicQCAreaRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.delete_qctp_area = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/delete_qctp_area',
                request_serializer=vehicle__manager__pb2.DeleteDynamicQCAreaRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.handle_area_by_qc_number = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/handle_area_by_qc_number',
                request_serializer=vehicle__manager__pb2.HandleAreaByQCRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.query_position_available_by_destination_type = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/query_position_available_by_destination_type',
                request_serializer=vehicle__manager__pb2.QueryAvailablePosByTypeRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.handel_nopass_area = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/handel_nopass_area',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.query_nopass_area = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/query_nopass_area',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.report_speed_ratio = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/report_speed_ratio',
                request_serializer=vehicle__manager__pb2.ReportSpeedRatioRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.save_lock_area_check_time = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/save_lock_area_check_time',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.forced_alarm_cancel = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/forced_alarm_cancel',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.report_qtruck_command = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/report_qtruck_command',
                request_serializer=vehicle__manager__pb2.ReportQtruckCommandRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.alarm_request = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/alarm_request',
                request_serializer=vehicle__manager__pb2.AlarmRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.receive_vehicle_message = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/receive_vehicle_message',
                request_serializer=vehicle__manager__pb2.VinMqttRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.sensorInfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/sensorInfo',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.unlock_init = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/unlock_init',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.eventRegister = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/eventRegister',
                request_serializer=vehicle__manager__pb2.EventRegisterInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.api_test = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/api_test',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.start_tracemalloc = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/start_tracemalloc',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.stop_tracemalloc = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/stop_tracemalloc',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.get_tracemalloc = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/get_tracemalloc',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetRRTaskInfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetRRTaskInfo',
                request_serializer=vehicle__manager__pb2.TaskInfoRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.SetRRTaskStatus = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/SetRRTaskStatus',
                request_serializer=vehicle__manager__pb2.TaskStatusRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.TruckPathReport = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/TruckPathReport',
                request_serializer=vehicle__manager__pb2.PathRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetRoute = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetRoute',
                request_serializer=vehicle__manager__pb2.PathRequestInSchema.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.getEmergencyStopInfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/getEmergencyStopInfo',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.SetTruckLocationInfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/SetTruckLocationInfo',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.SetTruckChassis = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/SetTruckChassis',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.SetTruckSystemStatus = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/SetTruckSystemStatus',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.SetSuspendReasonReport = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/SetSuspendReasonReport',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.CauseMatchFailure = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/CauseMatchFailure',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetServiceStatus = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetServiceStatus',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetRainFallInfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetRainFallInfo',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetAllvehicleinfo = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetAllvehicleinfo',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )
        self.GetTrunkInformation = channel.unary_unary(
                '/Vehicle_Manager.Vehicle_Manager/GetTrunkInformation',
                request_serializer=vehicle__manager__pb2.Request.SerializeToString,
                response_deserializer=vehicle__manager__pb2.Response.FromString,
                )


class Vehicle_ManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fleetmgmt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def position_remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def position_remove_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def power(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def bertinitial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def navigation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def api_vehicleManager_abort_post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def twist_locks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def qc_positions_change(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def alignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def safetyLeave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lockout_notification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def short_route_mission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_position_available(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def report_led_information(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def weather(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ts_positions_change(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_qctp_area(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_qctp_area(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handle_area_by_qc_number(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_position_available_by_destination_type(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handel_nopass_area(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_nopass_area(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def report_speed_ratio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save_lock_area_check_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forced_alarm_cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def report_qtruck_command(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def alarm_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receive_vehicle_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sensorInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unlock_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eventRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def api_test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_tracemalloc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_tracemalloc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_tracemalloc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRRTaskInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRRTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TruckPathReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getEmergencyStopInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTruckLocationInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTruckChassis(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTruckSystemStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSuspendReasonReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CauseMatchFailure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRainFallInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllvehicleinfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrunkInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Vehicle_ManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fleetmgmt': grpc.unary_unary_rpc_method_handler(
                    servicer.fleetmgmt,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=vehicle__manager__pb2.StopRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'stop_all': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_all,
                    request_deserializer=vehicle__manager__pb2.StopAllRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'position_remove': grpc.unary_unary_rpc_method_handler(
                    servicer.position_remove,
                    request_deserializer=vehicle__manager__pb2.RemoveVehiclePositionRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'position_remove_all': grpc.unary_unary_rpc_method_handler(
                    servicer.position_remove_all,
                    request_deserializer=vehicle__manager__pb2.RemoveAllVehiclePositionRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'power': grpc.unary_unary_rpc_method_handler(
                    servicer.power,
                    request_deserializer=vehicle__manager__pb2.VehiclePowerRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'bertinitial': grpc.unary_unary_rpc_method_handler(
                    servicer.bertinitial,
                    request_deserializer=vehicle__manager__pb2.BerthRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'navigation': grpc.unary_unary_rpc_method_handler(
                    servicer.navigation,
                    request_deserializer=vehicle__manager__pb2.NavigationRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'api_vehicleManager_abort_post': grpc.unary_unary_rpc_method_handler(
                    servicer.api_vehicleManager_abort_post,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'twist_locks': grpc.unary_unary_rpc_method_handler(
                    servicer.twist_locks,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.handshake,
                    request_deserializer=vehicle__manager__pb2.HandshakeRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'qc_positions_change': grpc.unary_unary_rpc_method_handler(
                    servicer.qc_positions_change,
                    request_deserializer=vehicle__manager__pb2.QCPositionRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.unlock,
                    request_deserializer=vehicle__manager__pb2.UnlockVehicleRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'alignment': grpc.unary_unary_rpc_method_handler(
                    servicer.alignment,
                    request_deserializer=vehicle__manager__pb2.AlignmentRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'safetyLeave': grpc.unary_unary_rpc_method_handler(
                    servicer.safetyLeave,
                    request_deserializer=vehicle__manager__pb2.SafeLeaveRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'lockout_notification': grpc.unary_unary_rpc_method_handler(
                    servicer.lockout_notification,
                    request_deserializer=vehicle__manager__pb2.LockoutNotificationRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'short_route_mission': grpc.unary_unary_rpc_method_handler(
                    servicer.short_route_mission,
                    request_deserializer=vehicle__manager__pb2.ShortBackPathRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'query_position_available': grpc.unary_unary_rpc_method_handler(
                    servicer.query_position_available,
                    request_deserializer=vehicle__manager__pb2.QueryAvailablePosRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'report_led_information': grpc.unary_unary_rpc_method_handler(
                    servicer.report_led_information,
                    request_deserializer=vehicle__manager__pb2.ReportLedInfoRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'weather': grpc.unary_unary_rpc_method_handler(
                    servicer.weather,
                    request_deserializer=vehicle__manager__pb2.ReportWeatherRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'ts_positions_change': grpc.unary_unary_rpc_method_handler(
                    servicer.ts_positions_change,
                    request_deserializer=vehicle__manager__pb2.TSPositionRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'create_qctp_area': grpc.unary_unary_rpc_method_handler(
                    servicer.create_qctp_area,
                    request_deserializer=vehicle__manager__pb2.CreateDynamicQCAreaRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'delete_qctp_area': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_qctp_area,
                    request_deserializer=vehicle__manager__pb2.DeleteDynamicQCAreaRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'handle_area_by_qc_number': grpc.unary_unary_rpc_method_handler(
                    servicer.handle_area_by_qc_number,
                    request_deserializer=vehicle__manager__pb2.HandleAreaByQCRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'query_position_available_by_destination_type': grpc.unary_unary_rpc_method_handler(
                    servicer.query_position_available_by_destination_type,
                    request_deserializer=vehicle__manager__pb2.QueryAvailablePosByTypeRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'handel_nopass_area': grpc.unary_unary_rpc_method_handler(
                    servicer.handel_nopass_area,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'query_nopass_area': grpc.unary_unary_rpc_method_handler(
                    servicer.query_nopass_area,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'report_speed_ratio': grpc.unary_unary_rpc_method_handler(
                    servicer.report_speed_ratio,
                    request_deserializer=vehicle__manager__pb2.ReportSpeedRatioRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'save_lock_area_check_time': grpc.unary_unary_rpc_method_handler(
                    servicer.save_lock_area_check_time,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'forced_alarm_cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.forced_alarm_cancel,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'report_qtruck_command': grpc.unary_unary_rpc_method_handler(
                    servicer.report_qtruck_command,
                    request_deserializer=vehicle__manager__pb2.ReportQtruckCommandRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'alarm_request': grpc.unary_unary_rpc_method_handler(
                    servicer.alarm_request,
                    request_deserializer=vehicle__manager__pb2.AlarmRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'receive_vehicle_message': grpc.unary_unary_rpc_method_handler(
                    servicer.receive_vehicle_message,
                    request_deserializer=vehicle__manager__pb2.VinMqttRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'sensorInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.sensorInfo,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'unlock_init': grpc.unary_unary_rpc_method_handler(
                    servicer.unlock_init,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'eventRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.eventRegister,
                    request_deserializer=vehicle__manager__pb2.EventRegisterInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'api_test': grpc.unary_unary_rpc_method_handler(
                    servicer.api_test,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'start_tracemalloc': grpc.unary_unary_rpc_method_handler(
                    servicer.start_tracemalloc,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'stop_tracemalloc': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_tracemalloc,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'get_tracemalloc': grpc.unary_unary_rpc_method_handler(
                    servicer.get_tracemalloc,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetRRTaskInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRRTaskInfo,
                    request_deserializer=vehicle__manager__pb2.TaskInfoRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'SetRRTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRRTaskStatus,
                    request_deserializer=vehicle__manager__pb2.TaskStatusRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'TruckPathReport': grpc.unary_unary_rpc_method_handler(
                    servicer.TruckPathReport,
                    request_deserializer=vehicle__manager__pb2.PathRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRoute,
                    request_deserializer=vehicle__manager__pb2.PathRequestInSchema.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'getEmergencyStopInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getEmergencyStopInfo,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'SetTruckLocationInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTruckLocationInfo,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'SetTruckChassis': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTruckChassis,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'SetTruckSystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTruckSystemStatus,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'SetSuspendReasonReport': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSuspendReasonReport,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'CauseMatchFailure': grpc.unary_unary_rpc_method_handler(
                    servicer.CauseMatchFailure,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetServiceStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceStatus,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetRainFallInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRainFallInfo,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetAllvehicleinfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllvehicleinfo,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
            'GetTrunkInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrunkInformation,
                    request_deserializer=vehicle__manager__pb2.Request.FromString,
                    response_serializer=vehicle__manager__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Vehicle_Manager.Vehicle_Manager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Vehicle_Manager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fleetmgmt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/fleetmgmt',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/stop',
            vehicle__manager__pb2.StopRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/stop_all',
            vehicle__manager__pb2.StopAllRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def position_remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/position_remove',
            vehicle__manager__pb2.RemoveVehiclePositionRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def position_remove_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/position_remove_all',
            vehicle__manager__pb2.RemoveAllVehiclePositionRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def power(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/power',
            vehicle__manager__pb2.VehiclePowerRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def bertinitial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/bertinitial',
            vehicle__manager__pb2.BerthRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def navigation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/navigation',
            vehicle__manager__pb2.NavigationRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def api_vehicleManager_abort_post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/api_vehicleManager_abort_post',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/status',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def twist_locks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/twist_locks',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/handshake',
            vehicle__manager__pb2.HandshakeRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def qc_positions_change(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/qc_positions_change',
            vehicle__manager__pb2.QCPositionRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/unlock',
            vehicle__manager__pb2.UnlockVehicleRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def alignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/alignment',
            vehicle__manager__pb2.AlignmentRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def safetyLeave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/safetyLeave',
            vehicle__manager__pb2.SafeLeaveRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lockout_notification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/lockout_notification',
            vehicle__manager__pb2.LockoutNotificationRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def short_route_mission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/short_route_mission',
            vehicle__manager__pb2.ShortBackPathRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_position_available(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/query_position_available',
            vehicle__manager__pb2.QueryAvailablePosRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def report_led_information(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/report_led_information',
            vehicle__manager__pb2.ReportLedInfoRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def weather(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/weather',
            vehicle__manager__pb2.ReportWeatherRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ts_positions_change(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/ts_positions_change',
            vehicle__manager__pb2.TSPositionRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_qctp_area(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/create_qctp_area',
            vehicle__manager__pb2.CreateDynamicQCAreaRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_qctp_area(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/delete_qctp_area',
            vehicle__manager__pb2.DeleteDynamicQCAreaRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def handle_area_by_qc_number(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/handle_area_by_qc_number',
            vehicle__manager__pb2.HandleAreaByQCRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_position_available_by_destination_type(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/query_position_available_by_destination_type',
            vehicle__manager__pb2.QueryAvailablePosByTypeRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def handel_nopass_area(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/handel_nopass_area',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_nopass_area(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/query_nopass_area',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def report_speed_ratio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/report_speed_ratio',
            vehicle__manager__pb2.ReportSpeedRatioRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save_lock_area_check_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/save_lock_area_check_time',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forced_alarm_cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/forced_alarm_cancel',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def report_qtruck_command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/report_qtruck_command',
            vehicle__manager__pb2.ReportQtruckCommandRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def alarm_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/alarm_request',
            vehicle__manager__pb2.AlarmRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def receive_vehicle_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/receive_vehicle_message',
            vehicle__manager__pb2.VinMqttRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sensorInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/sensorInfo',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unlock_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/unlock_init',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eventRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/eventRegister',
            vehicle__manager__pb2.EventRegisterInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def api_test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/api_test',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_tracemalloc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/start_tracemalloc',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_tracemalloc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/stop_tracemalloc',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_tracemalloc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/get_tracemalloc',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRRTaskInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetRRTaskInfo',
            vehicle__manager__pb2.TaskInfoRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRRTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/SetRRTaskStatus',
            vehicle__manager__pb2.TaskStatusRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TruckPathReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/TruckPathReport',
            vehicle__manager__pb2.PathRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetRoute',
            vehicle__manager__pb2.PathRequestInSchema.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getEmergencyStopInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/getEmergencyStopInfo',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTruckLocationInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/SetTruckLocationInfo',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTruckChassis(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/SetTruckChassis',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetTruckSystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/SetTruckSystemStatus',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSuspendReasonReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/SetSuspendReasonReport',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CauseMatchFailure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/CauseMatchFailure',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetServiceStatus',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRainFallInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetRainFallInfo',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllvehicleinfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetAllvehicleinfo',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTrunkInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Vehicle_Manager.Vehicle_Manager/GetTrunkInformation',
            vehicle__manager__pb2.Request.SerializeToString,
            vehicle__manager__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
