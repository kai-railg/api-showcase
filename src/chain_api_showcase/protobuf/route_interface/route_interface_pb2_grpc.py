# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import route_interface_pb2 as route__interface__pb2


class Route_InterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.update = channel.unary_unary(
                '/Route_Interface.Route_Interface/update',
                request_serializer=route__interface__pb2.UpdateRequest.SerializeToString,
                response_deserializer=route__interface__pb2.Response.FromString,
                )
        self.get_path = channel.unary_unary(
                '/Route_Interface.Route_Interface/get_path',
                request_serializer=route__interface__pb2.Request.SerializeToString,
                response_deserializer=route__interface__pb2.Response.FromString,
                )
        self.navi_status = channel.unary_unary(
                '/Route_Interface.Route_Interface/navi_status',
                request_serializer=route__interface__pb2.UpdateRequest.SerializeToString,
                response_deserializer=route__interface__pb2.Response.FromString,
                )


class Route_InterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_path(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def navi_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Route_InterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'update': grpc.unary_unary_rpc_method_handler(
                    servicer.update,
                    request_deserializer=route__interface__pb2.UpdateRequest.FromString,
                    response_serializer=route__interface__pb2.Response.SerializeToString,
            ),
            'get_path': grpc.unary_unary_rpc_method_handler(
                    servicer.get_path,
                    request_deserializer=route__interface__pb2.Request.FromString,
                    response_serializer=route__interface__pb2.Response.SerializeToString,
            ),
            'navi_status': grpc.unary_unary_rpc_method_handler(
                    servicer.navi_status,
                    request_deserializer=route__interface__pb2.UpdateRequest.FromString,
                    response_serializer=route__interface__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Route_Interface.Route_Interface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Route_Interface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Route_Interface.Route_Interface/update',
            route__interface__pb2.UpdateRequest.SerializeToString,
            route__interface__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_path(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Route_Interface.Route_Interface/get_path',
            route__interface__pb2.Request.SerializeToString,
            route__interface__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def navi_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Route_Interface.Route_Interface/navi_status',
            route__interface__pb2.UpdateRequest.SerializeToString,
            route__interface__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
