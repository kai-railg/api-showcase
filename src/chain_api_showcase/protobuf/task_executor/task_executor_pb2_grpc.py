# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import task_executor_pb2 as task__executor__pb2


class Task_ExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.message_event_start_post = channel.unary_unary(
                '/Task_Executor.Task_Executor/message_event_start_post',
                request_serializer=task__executor__pb2.VehicleOrderSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.abort = channel.unary_unary(
                '/Task_Executor.Task_Executor/abort',
                request_serializer=task__executor__pb2.Request.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.rch = channel.unary_unary(
                '/Task_Executor.Task_Executor/rch',
                request_serializer=task__executor__pb2.RchSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.update_qc_task = channel.unary_unary(
                '/Task_Executor.Task_Executor/update_qc_task',
                request_serializer=task__executor__pb2.UpdateQcTaskSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.event = channel.unary_unary(
                '/Task_Executor.Task_Executor/event',
                request_serializer=task__executor__pb2.EventListenerInSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.cancel_camunda_process = channel.unary_unary(
                '/Task_Executor.Task_Executor/cancel_camunda_process',
                request_serializer=task__executor__pb2.CancelCamundaSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.boundary_event = channel.unary_unary(
                '/Task_Executor.Task_Executor/boundary_event',
                request_serializer=task__executor__pb2.BoundaryEventSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.skip = channel.unary_unary(
                '/Task_Executor.Task_Executor/skip',
                request_serializer=task__executor__pb2.Request.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.activity = channel.unary_unary(
                '/Task_Executor.Task_Executor/activity',
                request_serializer=task__executor__pb2.Request.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.service_task = channel.unary_unary(
                '/Task_Executor.Task_Executor/service_task',
                request_serializer=task__executor__pb2.ServiceTaskInSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.cycle_event = channel.unary_unary(
                '/Task_Executor.Task_Executor/cycle_event',
                request_serializer=task__executor__pb2.CycleEventSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.event_driven = channel.unary_unary(
                '/Task_Executor.Task_Executor/event_driven',
                request_serializer=task__executor__pb2.EventDrivenSchema.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )
        self.abort_all_event_process = channel.unary_unary(
                '/Task_Executor.Task_Executor/abort_all_event_process',
                request_serializer=task__executor__pb2.Request.SerializeToString,
                response_deserializer=task__executor__pb2.Response.FromString,
                )


class Task_ExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def message_event_start_post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_qc_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel_camunda_process(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def boundary_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def skip(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def activity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def service_task(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cycle_event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def event_driven(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort_all_event_process(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Task_ExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'message_event_start_post': grpc.unary_unary_rpc_method_handler(
                    servicer.message_event_start_post,
                    request_deserializer=task__executor__pb2.VehicleOrderSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=task__executor__pb2.Request.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'rch': grpc.unary_unary_rpc_method_handler(
                    servicer.rch,
                    request_deserializer=task__executor__pb2.RchSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'update_qc_task': grpc.unary_unary_rpc_method_handler(
                    servicer.update_qc_task,
                    request_deserializer=task__executor__pb2.UpdateQcTaskSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'event': grpc.unary_unary_rpc_method_handler(
                    servicer.event,
                    request_deserializer=task__executor__pb2.EventListenerInSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'cancel_camunda_process': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel_camunda_process,
                    request_deserializer=task__executor__pb2.CancelCamundaSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'boundary_event': grpc.unary_unary_rpc_method_handler(
                    servicer.boundary_event,
                    request_deserializer=task__executor__pb2.BoundaryEventSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'skip': grpc.unary_unary_rpc_method_handler(
                    servicer.skip,
                    request_deserializer=task__executor__pb2.Request.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'activity': grpc.unary_unary_rpc_method_handler(
                    servicer.activity,
                    request_deserializer=task__executor__pb2.Request.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'service_task': grpc.unary_unary_rpc_method_handler(
                    servicer.service_task,
                    request_deserializer=task__executor__pb2.ServiceTaskInSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'cycle_event': grpc.unary_unary_rpc_method_handler(
                    servicer.cycle_event,
                    request_deserializer=task__executor__pb2.CycleEventSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'event_driven': grpc.unary_unary_rpc_method_handler(
                    servicer.event_driven,
                    request_deserializer=task__executor__pb2.EventDrivenSchema.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
            'abort_all_event_process': grpc.unary_unary_rpc_method_handler(
                    servicer.abort_all_event_process,
                    request_deserializer=task__executor__pb2.Request.FromString,
                    response_serializer=task__executor__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Task_Executor.Task_Executor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Task_Executor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def message_event_start_post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/message_event_start_post',
            task__executor__pb2.VehicleOrderSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/abort',
            task__executor__pb2.Request.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/rch',
            task__executor__pb2.RchSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_qc_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/update_qc_task',
            task__executor__pb2.UpdateQcTaskSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/event',
            task__executor__pb2.EventListenerInSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel_camunda_process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/cancel_camunda_process',
            task__executor__pb2.CancelCamundaSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def boundary_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/boundary_event',
            task__executor__pb2.BoundaryEventSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def skip(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/skip',
            task__executor__pb2.Request.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def activity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/activity',
            task__executor__pb2.Request.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def service_task(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/service_task',
            task__executor__pb2.ServiceTaskInSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cycle_event(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/cycle_event',
            task__executor__pb2.CycleEventSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def event_driven(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/event_driven',
            task__executor__pb2.EventDrivenSchema.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort_all_event_process(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Executor.Task_Executor/abort_all_event_process',
            task__executor__pb2.Request.SerializeToString,
            task__executor__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
