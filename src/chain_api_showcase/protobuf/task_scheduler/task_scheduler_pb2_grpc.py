# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import task_scheduler_pb2 as task__scheduler__pb2


class Task_SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.receive_mi = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/receive_mi',
                request_serializer=task__scheduler__pb2.MovementInstructions.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.remove = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/remove',
                request_serializer=task__scheduler__pb2.Request.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.dc = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/dc',
                request_serializer=task__scheduler__pb2.DependencyCheck.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.cancel = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/cancel',
                request_serializer=task__scheduler__pb2.MovementCancel.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.receive_mi_update_post = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/receive_mi_update_post',
                request_serializer=task__scheduler__pb2.MovementInstructions.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.receive_action_code = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/receive_action_code',
                request_serializer=task__scheduler__pb2.VehicleOrder.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.order_update = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/order_update',
                request_serializer=task__scheduler__pb2.TOSOrderUpdate.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.check_sc = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/check_sc',
                request_serializer=task__scheduler__pb2.Request.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )
        self.check_sc_details = channel.unary_unary(
                '/Task_Scheduler.Task_Scheduler/check_sc_details',
                request_serializer=task__scheduler__pb2.Request.SerializeToString,
                response_deserializer=task__scheduler__pb2.Response.FromString,
                )


class Task_SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def receive_mi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receive_mi_update_post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def receive_action_code(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def order_update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_sc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_sc_details(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Task_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'receive_mi': grpc.unary_unary_rpc_method_handler(
                    servicer.receive_mi,
                    request_deserializer=task__scheduler__pb2.MovementInstructions.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'remove': grpc.unary_unary_rpc_method_handler(
                    servicer.remove,
                    request_deserializer=task__scheduler__pb2.Request.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'dc': grpc.unary_unary_rpc_method_handler(
                    servicer.dc,
                    request_deserializer=task__scheduler__pb2.DependencyCheck.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=task__scheduler__pb2.MovementCancel.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'receive_mi_update_post': grpc.unary_unary_rpc_method_handler(
                    servicer.receive_mi_update_post,
                    request_deserializer=task__scheduler__pb2.MovementInstructions.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'receive_action_code': grpc.unary_unary_rpc_method_handler(
                    servicer.receive_action_code,
                    request_deserializer=task__scheduler__pb2.VehicleOrder.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'order_update': grpc.unary_unary_rpc_method_handler(
                    servicer.order_update,
                    request_deserializer=task__scheduler__pb2.TOSOrderUpdate.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'check_sc': grpc.unary_unary_rpc_method_handler(
                    servicer.check_sc,
                    request_deserializer=task__scheduler__pb2.Request.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
            'check_sc_details': grpc.unary_unary_rpc_method_handler(
                    servicer.check_sc_details,
                    request_deserializer=task__scheduler__pb2.Request.FromString,
                    response_serializer=task__scheduler__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Task_Scheduler.Task_Scheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Task_Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def receive_mi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/receive_mi',
            task__scheduler__pb2.MovementInstructions.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/remove',
            task__scheduler__pb2.Request.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def dc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/dc',
            task__scheduler__pb2.DependencyCheck.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/cancel',
            task__scheduler__pb2.MovementCancel.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def receive_mi_update_post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/receive_mi_update_post',
            task__scheduler__pb2.MovementInstructions.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def receive_action_code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/receive_action_code',
            task__scheduler__pb2.VehicleOrder.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def order_update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/order_update',
            task__scheduler__pb2.TOSOrderUpdate.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_sc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/check_sc',
            task__scheduler__pb2.Request.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_sc_details(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Task_Scheduler.Task_Scheduler/check_sc_details',
            task__scheduler__pb2.Request.SerializeToString,
            task__scheduler__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
