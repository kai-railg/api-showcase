# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import integrator_pb2 as integrator__pb2


class IntegratorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insert = channel.unary_unary(
                '/Integrator.Integrator/insert',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.clear = channel.unary_unary(
                '/Integrator.Integrator/clear',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.get_all = channel.unary_unary(
                '/Integrator.Integrator/get_all',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.rotate = channel.unary_unary(
                '/Integrator.Integrator/rotate',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.complete = channel.unary_unary(
                '/Integrator.Integrator/complete',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.exclusiveZone = channel.unary_unary(
                '/Integrator.Integrator/exclusiveZone',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.check_block_used = channel.unary_unary(
                '/Integrator.Integrator/check_block_used',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.lock_block = channel.unary_unary(
                '/Integrator.Integrator/lock_block',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.release_block = channel.unary_unary(
                '/Integrator.Integrator/release_block',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.select_holding = channel.unary_unary(
                '/Integrator.Integrator/select_holding',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.telep = channel.unary_unary(
                '/Integrator.Integrator/telep',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.shuffle = channel.unary_unary(
                '/Integrator.Integrator/shuffle',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.start = channel.unary_unary(
                '/Integrator.Integrator/start',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.start_teleop = channel.unary_unary(
                '/Integrator.Integrator/start_teleop',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.event_callback = channel.unary_unary(
                '/Integrator.Integrator/event_callback',
                request_serializer=integrator__pb2.EventCallback.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )
        self.report = channel.unary_unary(
                '/Integrator.Integrator/report',
                request_serializer=integrator__pb2.Request.SerializeToString,
                response_deserializer=integrator__pb2.Response.FromString,
                )


class IntegratorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clear(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rotate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def complete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exclusiveZone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_block_used(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lock_block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def release_block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def select_holding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def telep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shuffle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_teleop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def event_callback(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def report(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegratorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insert': grpc.unary_unary_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'get_all': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'rotate': grpc.unary_unary_rpc_method_handler(
                    servicer.rotate,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'complete': grpc.unary_unary_rpc_method_handler(
                    servicer.complete,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'exclusiveZone': grpc.unary_unary_rpc_method_handler(
                    servicer.exclusiveZone,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'check_block_used': grpc.unary_unary_rpc_method_handler(
                    servicer.check_block_used,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'lock_block': grpc.unary_unary_rpc_method_handler(
                    servicer.lock_block,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'release_block': grpc.unary_unary_rpc_method_handler(
                    servicer.release_block,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'select_holding': grpc.unary_unary_rpc_method_handler(
                    servicer.select_holding,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'telep': grpc.unary_unary_rpc_method_handler(
                    servicer.telep,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'shuffle': grpc.unary_unary_rpc_method_handler(
                    servicer.shuffle,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'start_teleop': grpc.unary_unary_rpc_method_handler(
                    servicer.start_teleop,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'event_callback': grpc.unary_unary_rpc_method_handler(
                    servicer.event_callback,
                    request_deserializer=integrator__pb2.EventCallback.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
            'report': grpc.unary_unary_rpc_method_handler(
                    servicer.report,
                    request_deserializer=integrator__pb2.Request.FromString,
                    response_serializer=integrator__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Integrator.Integrator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Integrator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/insert',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/clear',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_all(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/get_all',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rotate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/rotate',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def complete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/complete',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def exclusiveZone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/exclusiveZone',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_block_used(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/check_block_used',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lock_block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/lock_block',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def release_block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/release_block',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def select_holding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/select_holding',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def telep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/telep',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shuffle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/shuffle',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/start',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_teleop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/start_teleop',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def event_callback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/event_callback',
            integrator__pb2.EventCallback.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def report(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Integrator.Integrator/report',
            integrator__pb2.Request.SerializeToString,
            integrator__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
