# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import inventory_pb2 as inventory__pb2


class InventoryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddPoint = channel.unary_unary(
                '/Inventory.Inventory/AddPoint',
                request_serializer=inventory__pb2.AddPointSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.GetPointsHeading = channel.unary_unary(
                '/Inventory.Inventory/GetPointsHeading',
                request_serializer=inventory__pb2.PositionWithoutTierSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.GetAvailableTier = channel.unary_unary(
                '/Inventory.Inventory/GetAvailableTier',
                request_serializer=inventory__pb2.GetAvailableTierSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.GetContainerPoints = channel.unary_unary(
                '/Inventory.Inventory/GetContainerPoints',
                request_serializer=inventory__pb2.GetContainerPointsSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.InventoryUpdate = channel.unary_unary(
                '/Inventory.Inventory/InventoryUpdate',
                request_serializer=inventory__pb2.InventoryUpdateSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.ContainerCheck = channel.unary_unary(
                '/Inventory.Inventory/ContainerCheck',
                request_serializer=inventory__pb2.ContainerCheckSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.ImportAreaContainers = channel.unary_unary(
                '/Inventory.Inventory/ImportAreaContainers',
                request_serializer=inventory__pb2.ImportContainersSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.ImportContainers = channel.unary_unary(
                '/Inventory.Inventory/ImportContainers',
                request_serializer=inventory__pb2.ImportContainersSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.RemoveContainers = channel.unary_unary(
                '/Inventory.Inventory/RemoveContainers',
                request_serializer=inventory__pb2.RemoveContainerSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.EditContainers = channel.unary_unary(
                '/Inventory.Inventory/EditContainers',
                request_serializer=inventory__pb2.EditContainerSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.LimitLow = channel.unary_unary(
                '/Inventory.Inventory/LimitLow',
                request_serializer=inventory__pb2.LimitLowSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.EventListen = channel.unary_unary(
                '/Inventory.Inventory/EventListen',
                request_serializer=inventory__pb2.EventListenSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.ContainerQuery = channel.unary_unary(
                '/Inventory.Inventory/ContainerQuery',
                request_serializer=inventory__pb2.ContainerQuerySchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.ContainerTaskCheck = channel.unary_unary(
                '/Inventory.Inventory/ContainerTaskCheck',
                request_serializer=inventory__pb2.TaskCheckSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.CommonInfo = channel.unary_unary(
                '/Inventory.Inventory/CommonInfo',
                request_serializer=inventory__pb2.ContainerCommonInfoSchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.TGInitNotify = channel.unary_unary(
                '/Inventory.Inventory/TGInitNotify',
                request_serializer=inventory__pb2.TGInitNotifySchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )
        self.QcLeaveNotify = channel.unary_unary(
                '/Inventory.Inventory/QcLeaveNotify',
                request_serializer=inventory__pb2.QcLeaveNotifySchema.SerializeToString,
                response_deserializer=inventory__pb2.Response.FromString,
                )


class InventoryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddPoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPointsHeading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableTier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContainerPoints(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InventoryUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportAreaContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LimitLow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EventListen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContainerTaskCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommonInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TGInitNotify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QcLeaveNotify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPoint,
                    request_deserializer=inventory__pb2.AddPointSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'GetPointsHeading': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPointsHeading,
                    request_deserializer=inventory__pb2.PositionWithoutTierSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'GetAvailableTier': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableTier,
                    request_deserializer=inventory__pb2.GetAvailableTierSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'GetContainerPoints': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContainerPoints,
                    request_deserializer=inventory__pb2.GetContainerPointsSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'InventoryUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.InventoryUpdate,
                    request_deserializer=inventory__pb2.InventoryUpdateSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'ContainerCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerCheck,
                    request_deserializer=inventory__pb2.ContainerCheckSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'ImportAreaContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportAreaContainers,
                    request_deserializer=inventory__pb2.ImportContainersSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'ImportContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportContainers,
                    request_deserializer=inventory__pb2.ImportContainersSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'RemoveContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveContainers,
                    request_deserializer=inventory__pb2.RemoveContainerSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'EditContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.EditContainers,
                    request_deserializer=inventory__pb2.EditContainerSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'LimitLow': grpc.unary_unary_rpc_method_handler(
                    servicer.LimitLow,
                    request_deserializer=inventory__pb2.LimitLowSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'EventListen': grpc.unary_unary_rpc_method_handler(
                    servicer.EventListen,
                    request_deserializer=inventory__pb2.EventListenSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'ContainerQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerQuery,
                    request_deserializer=inventory__pb2.ContainerQuerySchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'ContainerTaskCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.ContainerTaskCheck,
                    request_deserializer=inventory__pb2.TaskCheckSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'CommonInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.CommonInfo,
                    request_deserializer=inventory__pb2.ContainerCommonInfoSchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'TGInitNotify': grpc.unary_unary_rpc_method_handler(
                    servicer.TGInitNotify,
                    request_deserializer=inventory__pb2.TGInitNotifySchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
            'QcLeaveNotify': grpc.unary_unary_rpc_method_handler(
                    servicer.QcLeaveNotify,
                    request_deserializer=inventory__pb2.QcLeaveNotifySchema.FromString,
                    response_serializer=inventory__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Inventory.Inventory', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Inventory(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/AddPoint',
            inventory__pb2.AddPointSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPointsHeading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/GetPointsHeading',
            inventory__pb2.PositionWithoutTierSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableTier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/GetAvailableTier',
            inventory__pb2.GetAvailableTierSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContainerPoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/GetContainerPoints',
            inventory__pb2.GetContainerPointsSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InventoryUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/InventoryUpdate',
            inventory__pb2.InventoryUpdateSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContainerCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/ContainerCheck',
            inventory__pb2.ContainerCheckSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportAreaContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/ImportAreaContainers',
            inventory__pb2.ImportContainersSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/ImportContainers',
            inventory__pb2.ImportContainersSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/RemoveContainers',
            inventory__pb2.RemoveContainerSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/EditContainers',
            inventory__pb2.EditContainerSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LimitLow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/LimitLow',
            inventory__pb2.LimitLowSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EventListen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/EventListen',
            inventory__pb2.EventListenSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContainerQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/ContainerQuery',
            inventory__pb2.ContainerQuerySchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContainerTaskCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/ContainerTaskCheck',
            inventory__pb2.TaskCheckSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommonInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/CommonInfo',
            inventory__pb2.ContainerCommonInfoSchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TGInitNotify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/TGInitNotify',
            inventory__pb2.TGInitNotifySchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QcLeaveNotify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Inventory.Inventory/QcLeaveNotify',
            inventory__pb2.QcLeaveNotifySchema.SerializeToString,
            inventory__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
