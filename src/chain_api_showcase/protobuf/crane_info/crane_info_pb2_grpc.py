# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import crane_info_pb2 as crane__info__pb2


class Crane_InfoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.asc_cps_info_report = channel.unary_unary(
                '/Crane_Info.Crane_Info/asc_cps_info_report',
                request_serializer=crane__info__pb2.CPSInfoRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.plc = channel.unary_unary(
                '/Crane_Info.Crane_Info/plc',
                request_serializer=crane__info__pb2.PlcDataRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.application_lane_handler = channel.unary_unary(
                '/Crane_Info.Crane_Info/application_lane_handler',
                request_serializer=crane__info__pb2.ApplicationLaneRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.qc_holding_info = channel.unary_unary(
                '/Crane_Info.Crane_Info/qc_holding_info',
                request_serializer=crane__info__pb2.QCPointRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.query_container_point = channel.unary_unary(
                '/Crane_Info.Crane_Info/query_container_point',
                request_serializer=crane__info__pb2.ContainerPointRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.qc_position = channel.unary_unary(
                '/Crane_Info.Crane_Info/qc_position',
                request_serializer=crane__info__pb2.UpdateQCPositionModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.qc_signal = channel.unary_unary(
                '/Crane_Info.Crane_Info/qc_signal',
                request_serializer=crane__info__pb2.QCSignalRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.qc_holding_status = channel.unary_unary(
                '/Crane_Info.Crane_Info/qc_holding_status',
                request_serializer=crane__info__pb2.QCHoldingRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.api_response_mixed_area_post = channel.unary_unary(
                '/Crane_Info.Crane_Info/api_response_mixed_area_post',
                request_serializer=crane__info__pb2.MixedAreaRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.api_engine_post = channel.unary_unary(
                '/Crane_Info.Crane_Info/api_engine_post',
                request_serializer=crane__info__pb2.EngineRequestModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )
        self.update_plc_data = channel.unary_unary(
                '/Crane_Info.Crane_Info/update_plc_data',
                request_serializer=crane__info__pb2.UpdatePlcDataModel.SerializeToString,
                response_deserializer=crane__info__pb2.Response.FromString,
                )


class Crane_InfoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def asc_cps_info_report(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def plc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def application_lane_handler(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def qc_holding_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query_container_point(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def qc_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def qc_signal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def qc_holding_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def api_response_mixed_area_post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def api_engine_post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_plc_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Crane_InfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'asc_cps_info_report': grpc.unary_unary_rpc_method_handler(
                    servicer.asc_cps_info_report,
                    request_deserializer=crane__info__pb2.CPSInfoRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'plc': grpc.unary_unary_rpc_method_handler(
                    servicer.plc,
                    request_deserializer=crane__info__pb2.PlcDataRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'application_lane_handler': grpc.unary_unary_rpc_method_handler(
                    servicer.application_lane_handler,
                    request_deserializer=crane__info__pb2.ApplicationLaneRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'qc_holding_info': grpc.unary_unary_rpc_method_handler(
                    servicer.qc_holding_info,
                    request_deserializer=crane__info__pb2.QCPointRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'query_container_point': grpc.unary_unary_rpc_method_handler(
                    servicer.query_container_point,
                    request_deserializer=crane__info__pb2.ContainerPointRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'qc_position': grpc.unary_unary_rpc_method_handler(
                    servicer.qc_position,
                    request_deserializer=crane__info__pb2.UpdateQCPositionModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'qc_signal': grpc.unary_unary_rpc_method_handler(
                    servicer.qc_signal,
                    request_deserializer=crane__info__pb2.QCSignalRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'qc_holding_status': grpc.unary_unary_rpc_method_handler(
                    servicer.qc_holding_status,
                    request_deserializer=crane__info__pb2.QCHoldingRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'api_response_mixed_area_post': grpc.unary_unary_rpc_method_handler(
                    servicer.api_response_mixed_area_post,
                    request_deserializer=crane__info__pb2.MixedAreaRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'api_engine_post': grpc.unary_unary_rpc_method_handler(
                    servicer.api_engine_post,
                    request_deserializer=crane__info__pb2.EngineRequestModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
            'update_plc_data': grpc.unary_unary_rpc_method_handler(
                    servicer.update_plc_data,
                    request_deserializer=crane__info__pb2.UpdatePlcDataModel.FromString,
                    response_serializer=crane__info__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Crane_Info.Crane_Info', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Crane_Info(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def asc_cps_info_report(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/asc_cps_info_report',
            crane__info__pb2.CPSInfoRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def plc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/plc',
            crane__info__pb2.PlcDataRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def application_lane_handler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/application_lane_handler',
            crane__info__pb2.ApplicationLaneRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def qc_holding_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/qc_holding_info',
            crane__info__pb2.QCPointRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query_container_point(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/query_container_point',
            crane__info__pb2.ContainerPointRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def qc_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/qc_position',
            crane__info__pb2.UpdateQCPositionModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def qc_signal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/qc_signal',
            crane__info__pb2.QCSignalRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def qc_holding_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/qc_holding_status',
            crane__info__pb2.QCHoldingRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def api_response_mixed_area_post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/api_response_mixed_area_post',
            crane__info__pb2.MixedAreaRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def api_engine_post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/api_engine_post',
            crane__info__pb2.EngineRequestModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_plc_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Crane_Info.Crane_Info/update_plc_data',
            crane__info__pb2.UpdatePlcDataModel.SerializeToString,
            crane__info__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
