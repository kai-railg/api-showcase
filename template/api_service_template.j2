# -*- coding: utf-8 -*-

from typing import Union, Tuple, Dict
from urllib import parse

import requests
from pydantic import BaseModel
from chain_http.async_client import (
    get as async_get,
    post as async_post,
    put as async_put,
    delete as async_delete,
    AsyncHttpResponse
)

from .api_base import ApiRequestBaseCls
from ..schemas.{{ project_name }} import *

__all__ = ["{{ cls_name }}"]

{# 处理post请求的模型和get参数，避免不必要的换行 #}
{% macro generate_parameter(endpoint) -%}
{%- if endpoint.model -%}
body: {{ endpoint.model }}{{ "," if endpoint.parameters }}
{%- endif -%}
{%- for parameter in endpoint.parameters %}
    {%- if parameter.model  -%}
    {{ parameter.name }}: {{ parameter.model }}{{ ", " if not loop.last }}
    {%- elif parameter.type == 'string' -%}
{{ parameter.name }}: str{{ " = str()" if parameter.default else "" }}{{ ", " if not loop.last }}
    {%- elif parameter.type == 'integer' -%}
{{ parameter.name }}: int{{ " = int()" if parameter.default else "" }}{{ ", " if not loop.last }}
    {%- elif parameter.type -%}
{{ parameter.name }}: {{ parameter.type }}{% if parameter.default %} = {% if parameter.type == 'bool' %}str({{ parameter.default }}).lower(){% else %}"{{ parameter.default }}"{% endif %}{% endif %}{{ ", " if not loop.last }}
    {%- endif -%}
{%- endfor -%}
{%- endmacro %}
class {{ cls_name }}Cls(ApiRequestBaseCls):
    def __init__(self):
        super({{ cls_name }}Cls, self).__init__()
        self.SERVICE_PORT = {{ port }}
        self.SERVICE_NAME = "{{ project_name }}"
        self.module_mapping[self.SERVICE_NAME] = self

    {% for endpoint in endpoints %}
    async def {{ endpoint.func_name }}(self{{ ", " if generate_parameter(endpoint) else "" }}{{ generate_parameter(endpoint) }}) -> Tuple[int, {{ endpoint.response_model if endpoint.response_model != "" else "Dict" }}]:
        """
        {{ endpoint.summary }}
        {{ endpoint.description }}
        """
        return await self.request(
            request=async_{{ endpoint.method }},
            api="{{ endpoint.path }}",
            body={
                {% if endpoint.method != 'get' %}{% if endpoint.model %}"data": body.model_dump_json(),{% endif %}{% endif %}
                {% if endpoint.parameters %}"params": dict({%- for parameter in endpoint.parameters %}{{ parameter.name }}={{ parameter.name }}{{ ", " if not loop.last }}{% endfor %}){% endif %}
            },
            resp_model={{ endpoint.response_model if endpoint.response_model else None }}
        )
    def {{ endpoint.func_name }}_sync(self{{ ", " if generate_parameter(endpoint) else "" }}{{ generate_parameter(endpoint) }}) -> Tuple[int, {{ endpoint.response_model if endpoint.response_model != "" else "Dict" }}]:
        """
        {{ endpoint.summary }}
        {{ endpoint.description }}
        """
        return self.request_sync(
            request=requests.{{ endpoint.method }},
            api="{{ endpoint.path }}",
            body={
                {% if endpoint.method != 'get' %}{% if endpoint.model %}"data": body.model_dump_json(),{% endif %}{% endif %}
                {% if endpoint.parameters %}"params": dict({%- for parameter in endpoint.parameters %}{{ parameter.name }}={{ parameter.name }}{{ ", " if not loop.last }}{% endfor %}){% endif %}
            },
            resp_model={{ endpoint.response_model if endpoint.response_model else None }}
        )
    {% endfor %}

{{ cls_name }} = {{ cls_name }}Cls()
